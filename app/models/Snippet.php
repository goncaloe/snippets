<?php

namespace app\models;

use Yii;
use yii\helpers\FileHelper;
use yii\db\Query;

/**
 * This is the model class for table "snippets".
 *
 * @property string $id
 * @property string $name
 * @property string $framework
 * @property int $created_at
 */
class Snippet extends \yii\base\Model
{

    public $id;
    public $name;
    public $framework;
    public $tags;
    public $date;

    public $inc_js;
    public $inc_css;

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['id', 'name'], 'required'],
            [['id'], 'string', 'min' => 5, 'max' => 32],
            [['name'], 'string', 'max' => 128],
            [['framework'], 'string', 'max' => 24],
            [['inc_js', 'inc_css'], 'boolean'],
            [['date'], 'date', 'format' => 'dd-mm-yyyy HH:mm'],
            [['tagsText'], 'string'],
            [['tags'], 'safe'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'framework' => 'Framework',
            'dateText' => 'Date',
            'css' => 'Use Css File',
            'js' => 'Use Javascript File',
        ];
    }

    public function setTagsText($value)
    {
        if(empty($value)) {
            $this->tags = [];
        }
        else {
            if($tags = trim($value)){
                $tags = preg_replace('/\s+/', ' ', $tags);
                $tags = strtolower($tags);
                $tags = preg_split('/\s*[,;]\s*/', $tags, NULL, PREG_SPLIT_NO_EMPTY);
            }
            else {
                $tags = [];
            }
            $this->tags = $tags;
        }
    }

    public function getTagsText()
    {
        if(!empty($this->tags)){
            return implode(', ', $this->tags);
        }
        return '';
    }

    public function frameworkOptions()
    {
        return [
            '' => 'Sem Framework',
            'bs3' => 'Bootstrap 3',
            'bs4' => 'Bootstrap 4',
        ];
    }

    public static function findSnippet($id)
    {
        $snippetsManager = Yii::$app->getSnippets();

        $data = $snippetsManager->getSnippetData($id);
        if(!$data){
            return null;
        }

        $snippetPath = $data['path'];
        $indexFile = $snippetPath.'/index.html';
        if(!file_exists($indexFile)){
            return null;
        }

        $snippet = new self;
        $snippet->setAttributes($data);

        $snippet->inc_css = file_exists($snippetPath . '/index.css');
        $snippet->inc_js = file_exists($snippetPath . '/index.js');

        return $snippet;
    }


    public function save($validate = true)
    {
        if($validate && !$this->validate()){
            return false;
        }

        $snippetsManager = Yii::$app->getSnippets();
        $snippetPath = $snippetsManager->snippetsPath.'/'.$this->id;
        if(!is_dir($snippetPath)) {
            mkdir($snippetPath);
        }

        $htmlFile = $snippetPath . '/index.html';
        if(!file_exists($htmlFile)){
            file_put_contents($htmlFile, "<!-- File generated by snippets app -->\n");
        }

        $json = [
            'name' => $this->name,
            'tags' => $this->tags,
            'date' => $this->date,
            'framework' => $this->framework
        ];
        file_put_contents($snippetPath . '/snippet.json', json_encode($json, JSON_PRETTY_PRINT));

        $cssFile = $snippetPath . '/index.css';
        $cssExists = file_exists($cssFile);
        if($this->inc_css && !$cssExists){
            file_put_contents($cssFile, "/* css file */\n");
        }
        elseif(!$this->inc_css && $cssExists) {
            unlink($cssFile);
        }

        $jsFile = $snippetPath . '/index.js';
        $jsExists = file_exists($jsFile);
        if($this->inc_js && !$jsExists){
            file_put_contents($snippetPath . '/index.js', "/* javascript file */\n");
        }
        elseif(!$this->inc_js && $jsExists) {
            unlink($jsFile);
        }

        return true;
    }

    public function delete()
    {
        $snippetsManager = Yii::$app->getSnippets();
        $snippetPath = $snippetsManager->basePath.'/'.$this->id;
        if(is_dir($snippetPath)) {
            FileHelper::removeDirectory($snippetPath);
        }

    }
}
